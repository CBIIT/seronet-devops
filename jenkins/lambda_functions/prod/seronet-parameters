
import groovy.json.JsonOutput

def sendSlackMessage() {
  jenkins_image = ":jenkins:"
  slack_image = ":sparkles:"
  long epoch = System.currentTimeMillis()/1000
  def BUILD_COLORS = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
  
  def slack = JsonOutput.toJson(
      [
            icon_emoji: jenkins_image,
            attachments: [[
              title: "Jenkins Job Alert - ${currentBuild.currentResult}",
              text:  "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}  ${slack_image}\n Details at: ${env.BUILD_URL}console",
              fallback: "Bento Jenkins Build",
              color: "${BUILD_COLORS[currentBuild.currentResult]}",
              footer: "bento devops",
              ts: epoch,
              mrkdwn_in: ["footer", "title"],
           ]]
        ]
    )
    try {
        sh "curl -X POST -H 'Content-type: application/json' --data '${slack}'  '${SLACK_URL}'"
    } catch (err) {
        echo "${err} Slack notify failed"
    }
}


pipeline {
  agent {
    node {
	  label 'seronet-cicd-prod'
	}
  }

  options {
  	ansiColor('xterm')
  }

  stages{
    stage('checkout'){
  		steps {

  			checkout( poll: false, 
				changelog:false,
				scm: [$class: 'GitSCM', 
				branches: [[name: '*/main']], 
				doGenerateSubmoduleConfigurations: false, 
				extensions: [[$class: 'DisableRemotePoll'],
				[$class: 'PathRestriction', excludedRegions: '*'], 
				[$class: 'RelativeTargetDirectory', 
				relativeTargetDir: 'seronet-devops']], 
				submoduleCfg: [], 
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/seronet-devops.git']]])

        }
 
  	}

    stage('Set Environment'){
      steps {
        script {
          withCredentials([string(credentialsId: '	Seronet_Slack_URL', variable: 'SLACK_URL')]) {
            env.SLACK_URL = "${SLACK_URL}"
          }
        }
      }
	}

    stage('update params'){
      environment {
	    PARAMETERS = "${params}"
        }
      steps {

        script {

          sh label: 'Param-Updates', script: '''#!/bin/bash

		  aws configure set default.region us-east-1

		  jenkinsParams="${PARAMETERS:1}"
          #echo "$jenkinsParams"

          for p in $jenkinsParams
          do
		    IFS=: read parName parVal <<< "$p"
			echo "Current Parameter name is:     $parName"
			parVal="${parVal%?}"
			echo ""

			if [ "$parVal" ]
			then

			  echo "Setting param $parName"
			  #aws ssm get-parameter --name $parName
			  aws ssm put-parameter \
                --name $parName \
                --type "SecureString" \
                --value $parVal \
                --overwrite

            fi

          done

          '''

          }
        }

      }
  }
  post {

	always {

      sendSlackMessage()

    }

	cleanup {
	
	  cleanWs()
    
	}

  }
}